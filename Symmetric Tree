class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {}

    TreeNode(int val) {
        this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

public class Solution {
    public boolean isSymmetric(TreeNode root) {
        // If the tree is empty, it is symmetric
        if (root == null) {
            return true;
        }
        
        // Start the recursive check for symmetry
        return isMirror(root.left, root.right);
    }
    
    // Helper function to check if two trees are mirrors of each other
    private boolean isMirror(TreeNode left, TreeNode right) {
        // If both nodes are null, they are mirrors of each other
        if (left == null && right == null) {
            return true;
        }
        
        // If one of the nodes is null and the other isn't, they are not mirrors
        if (left == null || right == null) {
            return false;
        }
        
        // Check if the values of the nodes are the same and the subtrees are mirrors of each other
        return (left.val == right.val) &&
               isMirror(left.left, right.right) && // Left child of left subtree and right child of right subtree
               isMirror(left.right, right.left);   // Right child of left subtree and left child of right subtree
    }
}
